scalar DateTime

type Query {
  # Fetches a specific Video information by ID
  getVideo(_id: String!): VideoType

  # Fetches Video Information by any property
  getVideosBy(input: VideoInput!): [VideoType]

  # Fetches all Videos
  listVideos: [VideoType]
}

type Mutation {
  # Adds new Video in the library
  addVideo(input: VideoInput!): VideoType

  # Update existing Video information
  updateVideo(input: VideoInput!): VideoType

  # Increments the view count of a Video
  incrementViewCount(_id: ID!): Int

  # Removes a Video by ID
  removeVideo(_id: String!): VideoType

  # Import From Mailing List
  importVideosFromMailman: String
}

type VideoType {
  _id: ID
  title: String
  description: String
  views: Int
  videoURL: String
  fileID: String
  source: String
  length: Int
  approxLength: String
  categories: [String]
  mailingLists: [String]
  tags: [String]
  createdBy: UserType
  createdOn: DateTime
  updatedBy: UserType
  updatedOn: DateTime
}

input VideoInput {
  _id: ID
  title: String
  description: String
  views: Int
  videoURL: String
  fileID: String
  source: String
  length: Int
  approxLength: String
  categories: [String]
  mailingLists: [String]
  tags: [String]
  createdBy: String
  createdOn: DateTime
  updatedBy: String
  updatedOn: DateTime
  skipEmail: Boolean
}

type UserType {
  _id: String
  name: String
  title: String
  uid: String
  rhatUUID: String
  memberOf: [String]
  isActive: Boolean
  apiRole: APIROLE
  createdBy: String
  createdOn: DateTime
  updatedBy: String
  updatedOn: DateTime
}

enum APIROLE {
  ADMIN
  USER
}
